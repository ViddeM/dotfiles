(defvar normal_window_class "win_normal")
(defvar hover_window_class "win_hovered")

(defvar left_class "win_normal win_left")
(defvar center_class "win_normal win_center")
(defvar right_class "win_normal win_right")

(defvar eww "eww")

;; Battery vars/polls
(defvar battery_image "images/battery_10.png")
(defvar battery_state "medium")
(defvar battery_exists false)

(defpoll battery_percent :interval "1s" "rust-scripts/target/release/battery_info --percentage")
;; (defpoll battery_time :interval "1s" "rust-scripts/target/release/battery_info --time")

;; Time / date
(defpoll hour :interval "1s" "rust-scripts/target/release/time_info --hour")
(defpoll minutes :interval "1s" "rust-scripts/target/release/time_info --minutes")
(defpoll day_of_week :interval "60s" "rust-scripts/target/release/time_info --day-of-week")
(defpoll day_of_month :interval "60s" "rust-scripts/target/release/time_info --day")
(defpoll month :interval "60s" "rust-scripts/target/release/time_info --month")
(defpoll year :interval "60s" "rust-scripts/target/release/time_info --year")

;; Keyboard layout
(defvar keyboard_flag "images/flag_se.png")
(defpoll layout :interval "0.1s" "rust-scripts/target/release/niri_keyboard --current")

;; Workspaces
(deflisten workspaces "rust-scripts/target/release/niri_workspaces")

;; Monitor 0

;; Left bar
(defwindow bar_left_0
  :monitor 0
  :stacking "fg"
  :geometry 
    (geometry 
      :anchor "top left"
      :x "0px"
      :y "-50px"
      :width "285px"
      :height "50px"
    )
  (widgets_left :monitor "eDP-1") ;; TODO: Support multi-monitors
)

;; Central bar 
(defwindow bar_center_0
  :monitor 0
  :stacking "fg"
  :geometry 
    (geometry 
      :anchor "top center"
      :x "0px"
      :y "0px"
      :width "30%"
      :height "50px"
    )
  :exclusive true
  (widgets_center)
)

;; Right bar
(defwindow bar_right_0
  :monitor 0
  :stacking "fg"
  :geometry 
    (geometry 
      :anchor "top right"
      :x "0px"
      :y "-50px"
      :width "285px"
      :height "50px"
    )
  (widgets_right)
)

;; Left bar
(defwindow bar_left_1
  :monitor 1
  :stacking "fg"
  :geometry 
    (geometry 
      :anchor "top left"
      :x "0px"
      :y "-50px"
      :width "285px"
      :height "50px"
    )
  (widgets_left :monitor "eDP-1")
)

;; Central bar
(defwindow bar_center_1
  :monitor 1
  :stacking "fg"
  :geometry 
    (geometry 
      :anchor "top center"
      :x "0px"
      :y "0px"
      :width "30%"
      :height "50px"
    )
  :exclusive true
  (widgets_center)
)

;; Right bar
(defwindow bar_right_1
  :monitor 1
  :stacking "fg"
  :geometry 
    (geometry 
      :anchor "top right"
      :x "0px"
      :y "-50px"
      :width "285px"
      :height "50px"
    )
  (widgets_right)
)

;; WIDGETS
;; Left widgets

(defwidget widgets_left [monitor]
  (eventbox
    :onhover "${eww} update left_class=\"${hover_window_class} win_left\""
    :onhoverlost "${eww} update left_class=\"${normal_window_class} win_left\""
    (box 
      :spacing 0
      :space-evenly false
      :class left_class
      :orientation "h"
      :valign "fill"
      :halign "fill"
      :hexpand "false"
      (workspaces :monitor monitor)
    )
  )
)

;; Central widgets

(defwidget widgets_center []
  (eventbox
    :onhover "${eww} update center_class=\"${hover_window_class} win_center\""
    :onhoverlost "${eww} update center_class=\"${normal_window_class} win_center\""
    (box
      :halign "fill"
      :hexpand false
      :class center_class
      (time)
    )
  )
)

;; Right widgets

(defwidget widgets_right []
  (eventbox
    :onhover "${eww} update right_class=\"${hover_window_class} win_right\""
    :onhoverlost "${eww} update right_class=\"${normal_window_class} win_right\""
    (box
      :halign "fill"
      :class right_class
      (centerbox 
        ;; :space-evenly false
        ;; :spacing 10
        :halign "fill"
        :valign "fill"
        :orientation "h"
        :hexpand "false"
        (keyboard_layout)
        (label)
        (battery_status)
      )
    )
  )
)

;; Battery Status

(defwidget battery_status []
  (box
    :halign "center"
    :hexpand false
    (eventbox
      :tooltip "Battery"
      :class "battery_container"
      (box
        :halign "fill"
        :space-evenly true
        (box :visible battery_exists (battery_status_inner))
        (box :visible {battery_exists == false} (no_battery))
      )
    )
  )
)

(defwidget no_battery []
  (box
    :orientation "h"
    :space-evenly false
    :vexpand "false"
    :hexpand "false"
      (label
        :class "center_labels"
        :text "No battery"
        :halign "center")))

(defwidget battery_status_inner []
  (box
    :halign "center"
    :valign "center"
    :vexpand "false"
    :hexpand "false"
    (box
      :halign "end"
      :orientation "h"
      :hexpand "false"
      :space-evenly false
      (box 
        :orientation "v"
        :space-evenly "false"
        :vexpand "false"
        :hexpand "false"
        :valign "center"
        (box
          :orientation "v"
          :class "center_info battery_${battery_state}"
          :valign "start"
          (label
            :class "center_labels"
            :text "${battery_percent}%"
            :halign "center")
          (scale
            :min 0
            :max 100
            :value {battery_percent ?: 0.0}
            :orientation "h"
          )
        )
      )
      (image
        :class "center_icons"
        :path battery_image
        :halign "center"
        :hexpand false
        :image-width 30
        :image-height 30
      )
    )
  )
)

;; Keyboard layout
(defwidget keyboard_layout []
  (eventbox
    :tooltip "Layout ${layout}"
    :onclick "niri msg action switch-layout next"
    :cursor "pointer"
    (box
      :class "center_info"
      :space-evenly "false"
      :vexpand "false"
      :hexpand "false"
      :valign "center"
      :orientation "h"
      (image
        :path keyboard_flag
        :halign "center"
        :image-width 30
        :image-height 30
      )
    )
  )
)

;; Current Time

(defwidget time []
  (box
    :tooltip "Current time"
    :class "time_box"
    :valign "center"
    :halign "fill"
    :hexpand false
    :vexpand false
    :space-evenly true
    (label
      :valign "center"
      :class "date"
      :markup "<span font-size=\"xx-small\">${day_of_week}</span><span font-size=\"xx-small\"> ${day_of_month}/${month}</span>"
    )
    (label
      :valign "center"
      :class "time"
      :halign "center"
      :markup "<span font-weight=\"heavy\">${hour}</span><span font-weight=\"heavy\">:${minutes}</span>"
    )
    (label
      :valign "fill"
      :class "date"
      :markup "<span font-size=\"xx-small\">${year}</span>"
    )
  )
)

;; Workspaces

(defwidget workspaces [monitor]
  (centerbox
    :orientation "h"
    :halign "fill"
    :valign "fill"
    :hexpand true
    :class "workspaces"
    (workspaces_list :monitor monitor)
    (box :width 4 :class "workspace_divider")
    (windows_list :active_workspace {workspaces.outputs[monitor].active_workspace})
  )
)

(defwidget workspaces_list [monitor]
  (box 
    :orientation "h"
    :halign "center"
    :valign "center"
    :space-evenly false
    :spacing 4
    (for wsp in {workspaces.outputs[monitor].workspaces}
      (box
        :width 16
        :height 16
        :style "border-radius: 50%; background-color: ${wsp.is_active ? "green" : "red"}"
      )
    )
  )
)

(defwidget windows_list [active_workspace]
  (box
    :orientation "h"
    :halign "center"
    :valign "center"
    :space-evenly false
    :spacing 4
    (for column in {active_workspace.columns}
      (column_circle
        :active {column.is_active}
        :urgent {column.is_urgent}
        :num_windows {column.num_windows}
      )
    )
    
  )
)

(defwidget column_circle [active urgent num_windows]
  (box
    :width 20
    :height 20
    :style "border-radius: 50%; border: 2px solid ${active ? "green" : "${urgent ? "pink" : "red"}"};"
    (label :text "${num_windows}" :style "font-size: 12")
      ;;background-color: ${active ? "green" : "${urgent ? "pink" : "red"}"}"
  )
)

(defwidget workspaces_old [monitor]
  (box
    :orientation "v"
    :space-evenly false
    :halign "start"
    :valign "start"
    :hexpand false
    :class "workspaces"
    (for wsp in {workspaces.outputs[monitor]}
      (box
        ;; :width 24
        ;; :height 8
        :hexpand false
        :vexpand false
        :orientation "h"
        :space-evenly false
        ;; :class "workspace ${wsp.is_active ? "workspace_active" : "workspace_inactive"}"
        (for col in {wsp.columns}
          (box
            :width 12
            :height 6
            :hexpand false
            :class "window ${wsp.is_active ? "${col.contains_focused_window ? "window_active" : "workspace_active"}" : "workspace_inactive"}"
            ;;:class "window ${
              ;;wsp.is_active ? 
                ;;"${win.is_focused ? 
                  ;;"window_active" 
                  ;;: "workspace_active"
                ;;}" 
                ;;: "workspace_inactive"
              ;;}"
          )
        )
      )
    )
  )
)

